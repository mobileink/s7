# load("@rules_cc//cc:defs.bzl", "cc_binary")

filegroup(
    name = "scm",
    data = glob(["*.scm"])
)

## build targets: s7, libc_s7, repl, nrepl

# WITH_SYSTEM_EXTRAS
  # is_directory_symbol, file_exists_symbol, delete_file_symbol,
  # getenv_symbol, system_symbol,
  # directory_to_list_symbol,
  # file_mtime_symbol

###########
cc_library(
    name  = "s7",
    # linkstatic = 0,
    srcs  = ["s7.c", "libc_s7.c", "libdl_s7.c", "libm_s7.c"],
    hdrs  = ["s7.h"],
    copts = [
        "-Wall",
        "-Wextra",
        "-Werror=pedantic",
        "-Wno-unused-parameter",
        "-Wno-format-pedantic",
        "-Isrc",
    ] + select({
        "//:macos": [
            "-Wno-gnu",
            "-std=c11"
        ],
        "//:linux": [
            "-std=gnu11",
            "-Wpedantic-errors",
        ],
        "//conditions:default": ["-std=c11"],
    }),
    data = glob(["*.scm"]) + ["s7.h"],
    defines = [
        # "WITH_MAIN"
        "WITH_SYSTEM_EXTRAS"
        # "WITH_C_LOADER",
    ] + select({
        # "//config/s7:debug?": ["S7_DEBUGGING"],
        "//conditions:default":   []
    }),
    linkopts = select({
        # "//:macos": ["-std=c11"],
        "//:linux": ["-lm"],
        "//conditions:default": []
    }),
    visibility = ["//visibility:public"]
)

cc_library(
    name  = "c_s7",
    # linkstatic = 0,
    srcs  = ["libc_s7.c"],
    hdrs  = ["s7.h"],
    copts = [
        "-Wall",
        "-Wextra",
        "-Werror=pedantic",
        "-Wno-unused-parameter",
        "-Wno-format-pedantic",
        "-Isrc",
    ] + select({
        "//:macos": [
            "-Wno-gnu",
            "-std=c11"
        ],
        "//:linux": [
            "-std=gnu11",
            "-Wpedantic-errors",
        ],
        "//conditions:default": ["-std=c11"],
    }),
    data = glob(["*.scm"]) + ["s7.h"],
    defines = [
        # "WITH_MAIN"
        "WITH_SYSTEM_EXTRAS"
        # "WITH_C_LOADER",
    ] + select({
        # "//config/s7:debug?": ["S7_DEBUGGING"],
        "//conditions:default":   []
    }),
    linkopts = select({
        # "//:macos": ["-std=c11"],
        "//:linux": ["-lm"],
        "//conditions:default": []
    }),
    visibility = ["//visibility:public"]
)

# cc_binary(
#     name  = "c_s7",  # create libc_s7
#     # linkshared = True,
#     srcs  = ["libc_s7.c", "s7.h"],
#     copts = [
#         "-Wall",
#         "-Wextra",
#         "-Werror=pedantic",
#         "-Wno-unused-parameter",
#         "-Wno-format-pedantic",
#         "-Isrc",
#     ] + select({
#         "//:macos": [
#             "-Wno-gnu",
#             "-std=c11"
#         ],
#         "//:linux": [
#             "-std=gnu11",
#             "-Wpedantic-errors",
#         ],
#         "//conditions:default": ["-std=c11"],
#     }),
#     defines = [
#         "WITH_SYSTEM_EXTRAS"
#     ],
#     linkopts = select({
#         "//bzl/host:macos": [],
#         "//bzl/host:linux": ["-ldl", "-Wl,-export-dynamic"],
#         "//conditions:default": []
#     }) + [
#         "-lm"
#     ],
#     visibility = ["//visibility:public"]
# )

cc_library(
    name  = "dl_s7",
    # linkstatic = 0,
    srcs  = ["libdl_s7.c"],
    hdrs  = ["s7.h"],
    copts = [
        "-Wall",
        "-Wextra",
        "-Werror=pedantic",
        "-Wno-unused-parameter",
        "-Wno-format-pedantic",
        "-Isrc",
    ] + select({
        "//:macos": [
            "-Wno-gnu",
            "-std=c11"
        ],
        "//:linux": [
            "-std=gnu11",
            "-Wpedantic-errors",
        ],
        "//conditions:default": ["-std=c11"],
    }),
    data = glob(["*.scm"]) + ["s7.h"],
    defines = [
        # "WITH_MAIN"
        "WITH_SYSTEM_EXTRAS"
        # "WITH_C_LOADER",
    ] + select({
        # "//config/s7:debug?": ["S7_DEBUGGING"],
        "//conditions:default":   []
    }),
    linkopts = select({
        # "//:macos": ["-std=c11"],
        "//:linux": ["-lm"],
        "//conditions:default": []
    }),
    visibility = ["//visibility:public"]
)

cc_library(
    name  = "gdbm_s7",
    # linkstatic = 0,
    srcs  = ["libgdbm_s7.c"],
    hdrs  = ["s7.h"],
    copts = [
        "-Wall",
        "-Wextra",
        "-Werror=pedantic",
        "-Wno-unused-parameter",
        "-Wno-format-pedantic",
        "-Isrc",
    ] + select({
        "//:macos": [
            "-Wno-gnu",
            "-std=c11"
        ],
        "//:linux": [
            "-std=gnu11",
            "-Wpedantic-errors",
        ],
        "//conditions:default": ["-std=c11"],
    }),
    data = glob(["*.scm"]) + ["s7.h"],
    defines = [
        # "WITH_MAIN"
        "WITH_SYSTEM_EXTRAS"
        # "WITH_C_LOADER",
    ] + select({
        # "//config/s7:debug?": ["S7_DEBUGGING"],
        "//conditions:default":   []
    }),
    linkopts = select({
        # "//:macos": ["-std=c11"],
        "//:linux": ["-lm"],
        "//conditions:default": []
    }),
    visibility = ["//visibility:public"]
)

cc_library(
    name  = "m_s7",
    # linkstatic = 0,
    srcs  = ["libgdbm_s7.c"],
    hdrs  = ["s7.h"],
    copts = [
        "-Wall",
        "-Wextra",
        "-Werror=pedantic",
        "-Wno-unused-parameter",
        "-Wno-format-pedantic",
        "-Isrc",
    ] + select({
        "//:macos": [
            "-Wno-gnu",
            "-std=c11"
        ],
        "//:linux": [
            "-std=gnu11",
            "-Wpedantic-errors",
        ],
        "//conditions:default": ["-std=c11"],
    }),
    data = glob(["*.scm"]) + ["s7.h"],
    defines = [
        # "WITH_MAIN"
        "WITH_SYSTEM_EXTRAS"
        # "WITH_C_LOADER",
    ] + select({
        # "//config/s7:debug?": ["S7_DEBUGGING"],
        "//conditions:default":   []
    }),
    linkopts = select({
        # "//:macos": ["-std=c11"],
        "//:linux": ["-lm"],
        "//conditions:default": []
    }),
    visibility = ["//visibility:public"]
)

cc_library(
    name  = "utf8proc_s7",
    # linkstatic = 0,
    srcs  = ["libutf8proc_s7.c"],
    hdrs  = ["s7.h"],
    copts = [
        "-Wall",
        "-Wextra",
        "-Werror=pedantic",
        "-Wno-unused-parameter",
        "-Wno-format-pedantic",
        "-Isrc",
    ] + select({
        "//:macos": [
            "-Wno-gnu",
            "-std=c11"
        ],
        "//:linux": [
            "-std=gnu11",
            "-Wpedantic-errors",
        ],
        "//conditions:default": ["-std=c11"],
    }),
    data = glob(["*.scm"]) + ["s7.h"],
    defines = [
        # "WITH_MAIN"
        "WITH_SYSTEM_EXTRAS"
        # "WITH_C_LOADER",
    ] + select({
        # "//config/s7:debug?": ["S7_DEBUGGING"],
        "//conditions:default":   []
    }),
    linkopts = select({
        # "//:macos": ["-std=c11"],
        "//:linux": ["-lm"],
        "//conditions:default": []
    }),
    visibility = ["//visibility:public"]
)

##########
## linux: gcc -o repl repl.c s7.o -Wl,-export-dynamic -lm -I. -ldl
cc_binary(
    name  = "repl",
    srcs  = ["repl.c", "mus-config.h"],
    copts = select({
        # "//:bsd": ["-std=c11"],
        "//:macos": ["-std=c11"],
        "//:linux": [
            "-std=c11",
            "-Wl,export-dynamic",
            ],
        # "//:linux_clang": [
        #     "-std=c11",
        #     "-fPIC",
        #     "-Wl,export-dynamic",
        #     ],
        "//conditions:default": ["-std=c11"],
    }) + [
        # "-pedantic-errors",
        # "-Wextra",
        "-O2", "-g",
        "-I.",
        "-I$(GENDIR)/s7"
    ],
    data = [":scm"],
    deps = [":s7"], ## ":c_s7"],
    linkopts = select({
        # "//:bsd": ["-Wl,-export-dynamic"],
        "//:macos": [],
        "//:linux": ["-ldl", "-Wl,-export-dynamic"],
        # "//:linux_clang": ["-ldl", "-Wl,-export-dynamic"],
        "//conditions:default": []
    }) + [
        "-lm",
    ],
    visibility = ["//visibility:public"]
)

##########
## nrepl depends on notcurses, which is yet another big hairy lib

# deps: libdeflate-dev libncurses-dev libunistring-dev

# libgpm: general purpose mouse GPL v2

# multimedia support: libavformat-dev libavutil-dev libswscale-dev
# qrcode support:  libqrcodegen-dev
# other stuff we don't need:  install build-essential cmake doctest-dev pandoc pkg-config
# GPL: libgpm-dev

# cc_binary(
#     name  = "nrepl",
#     srcs  = ["nrepl.c", "notcurses_s7.c", "s7.h"],
#     deps = [
#         ":s7"
#     ],
#     visibility = ["//visibility:public"]
# )
