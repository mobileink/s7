(display "loading test.scm")
(newline)

(define (string-wi=? s1 s2) ; string=? ignoring white-space
  (let ((iter1 (make-iterator s1))
	(iter2 (make-iterator s2)))
    (let wi-loop ((i1 (iterate iter1)) (i2 (iterate iter2)))
      (if (eq? i1 i2)
	  (or (eq? i1 #<eof>)
	      (wi-loop (iterate iter1) (iterate iter2)))
	  (if (and (char? i1)
		   (char-whitespace? i1))
	      (wi-loop (iterate iter1) i2)
	      (and (char? i2)
		   (char-whitespace? i2)
		   (wi-loop i1 (iterate iter2))))))))

(define-macro (test-wi tst res)
  `(let ((val ,tst))
     (unless (string-wi=? val ,res)
       (format *stderr* "~A: ~S got ~S but expected ~S~%" (port-line-number) ',tst val ,res))))

(define (ok? otst ola oexp)
  (let ((result (catch #t ola
		       (lambda args
			 (if (not (eq? oexp 'error))
			     (begin (display args) (newline)))
			 'error))))
    (if (not (equal? result oexp))
	(format #t "~A: ~A got ~S but expected ~S~%~%" (port-line-number) otst result oexp))))

(define-macro (test tst expected) ;(display tst *stderr*) (newline *stderr*)
      ;; `(ok? ',tst (lambda () (eval-string (format #f "~S" ',tst))) ,expected))
      ;; `(ok? ',tst (lambda () (eval ',tst)) ,expected))
      ;; `(ok? ',tst (lambda () ,tst) ,expected))
      ;; `(ok? ',tst (lambda () (eval-string (object->string ,tst :readable))) ,expected))
      ;; `(ok? ',tst (let () (define (_s7_) ,tst)) ,expected))
      ;; `(ok? ',tst (lambda () (let ((_s7_ #f)) (set! _s7_ ,tst))) ,expected))
      ;; `(ok? ',tst (lambda () (let ((_s7_ ,tst)) _s7_)) ,expected))
      ;; `(ok? ',tst (catch #t (lambda () (lambda* ((_a_ ,tst)) _a_)) (lambda any (lambda () 'error))) ,expected))
      ;; `(ok? ',tst (lambda () (do ((_a_ ,tst)) (#t _a_))) ,expected))
      ;; `(ok? ',tst (lambda () (call-with-exit (lambda (_a_) (_a_ ,tst)))) ,expected))
      ;; `(ok? ',tst (lambda () (values ,tst)) ,expected))
      ;; `(ok? ',tst (lambda () (define (_s7_ _a_) _a_) (_s7_ ,tst)) ,expected))
      ;; `(ok? ',tst (lambda () (define* (_s7_ (_a_ #f)) (or _a_)) (_s7_ ,tst)) ,expected))
      ;; `(ok? ',tst (lambda () (caadr (catch 'receive (lambda () (throw 'receive ,tst)) (lambda any any)))) ,expected))
      ;; `(ok? ',tst (lambda () (stacktrace (- (random 100) 50) (- (random 100) 50) (- (random 100) 50) (- (random 100) 50) (> (random 100) 50)) ,tst) ,expected))
      (list 'ok? (list quote tst) (list-values lambda () tst) expected))

(display "loaded test.scm")
(newline)
