.Dd July 10, 2021
.Dt S7 3
.Sh NAME
.Nm S7
.Nd iterators
.Sh SYNOPSIS
.Pp
.Em (make-iterator sequence)
.Pp
.Em (iterator? obj)
.Pp
.Em (iterate iterator)
.Pp
.Em (iterator-sequence iterator)
.Pp
.Em (iterator-at-end? iterator)
.Pp
.Sh DESCRIPTION
.Em make-iterator
takes a sequence argument and returns an iterator object that traverses that sequence as it is called. The iterator itself can be treated as a function of no arguments, or (for code clarity) it can be the argument to iterate, which does the same thing. That is (iter) is the same as (iterate iter). The sequence that an iterator is traversing is iterator-sequence.

If the sequence is a hash-table or let, the iterator normally returns a cons of the key and value. There are many cases where this overhead is objectionable, so make-iterator takes a third optional argument, the cons to use (changing its car and cdr directly on each call).

When an iterator reaches the end of its sequence, it returns #<eof>. It used to return nil; I can't decide whether this change is an improvement. If an iterator over a list notices that its list is circular, it returns #<eof>. map and for-each use iterators, so if you pass a circular list to either, it will stop eventually. (An arcane consequence for method writers: specialize make-iterator, not map or for-each).

(define (find-if f sequence)
  (let ((iter (make-iterator sequence)))
    (do ((x (iter) (iter)))
	((or (eof-object? x) (f x))
	 (and (not (eof-object? x)) x)))))
But of course a sequence might contain #<eof>! So to be really safe, use iterator-at-end? instead of eof-object?.

The argument to make-iterator can also be a function or macro. There should be a variable named '+iterator+ with a non-#f value in the closure's environment:

(define (make-circular-iterator obj)
  (let ((iter (make-iterator obj)))
    (make-iterator 
     (let ((+iterator+ #t))
       (lambda ()
         (case (iter) 
           ((#<eof>) ((set! iter (make-iterator obj))))
           (else)))))))
The 'iterator? variable is similar to the '+documentation+ variable used by documentation. It gives make-iterator some hope of catching inadvertent bogus function arguments that would otherwise cause an infinite loop.
.Sh EXAMPLES
.Sh SEE ALSO
.Xr s7_c_iterators 3
.Sh AUTHORS
.An Bill Schottstaedt Aq Mt bil@ccrma.stanford.edu
.An Mike Scholz
provided the FreeBSD support (complex trig funcs, etc)
.An Rick Taube, Andrew Burnson, Donny Ward, and Greg Santucci
provided the MS Visual C++ support
.An Kjetil Matheussen
provided the mingw support
.An chai xiaoxiang
provided the msys2 support
