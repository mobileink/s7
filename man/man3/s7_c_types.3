.Dd July 10, 2021
.Dt S7 3
.Os
.Sh NAME
.Nd C Types
.Sh LIBRARY
.Lb libs7
.Sh SYNOPSIS
.In s7.h
.Ft s7_int
.Fn s7_c_object_type "s7_pointer obj"
.Ft s7_int
.Fn s7_make_c_type "s7_scheme *sc, const char *name"
.Ft void
.Fn s7_c_type_set_free "s7_scheme *sc, s7_int typetag, void (*gc_free)(void *value)"
.Ft void
.Fn s7_c_type_set_mark "s7_scheme *sc, s7_int typetag, void (*mark)(void *value)"
.Ft void
.Fn s7_c_type_set_equal "s7_scheme *sc, s7_int typetag, bool (*equal)(void *value1, void *value2)"
.Ft void
.Fn s7_c_type_set_gc_free "s7_scheme *sc, s7_int typetag, s7_pointer (*gc_free)   (s7_scheme *sc, s7_pointer obj)"
.Ft void
.Fn s7_c_type_set_gc_mark "s7_scheme *sc, s7_int typetag, s7_pointer (*mark)      (s7_scheme *sc, s7_pointer obj)"
.Ft void
.Fn s7_c_type_set_is_equal "s7_scheme *sc, s7_int typetag, s7_pointer (*is_equal)  (s7_scheme *sc, s7_pointer args)"
.Ft void
.Fn s7_c_type_set_is_equivalent "s7_scheme *sc, s7_int typetag, s7_pointer (*is_equivalent)(s7_scheme *sc, s7_pointer args)"
.Ft void
.Fn s7_c_type_set_ref "s7_scheme *sc, s7_int typetag, s7_pointer (*ref_fn)       (s7_scheme *sc, s7_pointer args)"
.Ft void
.Fn s7_c_type_set_set "s7_scheme *sc, s7_int typetag, s7_pointer (*set_fn)       (s7_scheme *sc, s7_pointer args)"
.Ft void
.Fn s7_c_type_set_length "s7_scheme *sc, s7_int typetag, s7_pointer (*length)    (s7_scheme *sc, s7_pointer args)"
.Ft void
.Fn s7_c_type_set_copy "s7_scheme *sc, s7_int typetag, s7_pointer (*copy)      (s7_scheme *sc, s7_pointer args)"
.Ft void
.Fn s7_c_type_set_fill "s7_scheme *sc, s7_int typetag, s7_pointer (*fill)      (s7_scheme *sc, s7_pointer args)"
.Ft void
.Fn s7_c_type_set_reverse "s7_scheme *sc, s7_int typetag, s7_pointer (*reverse)   (s7_scheme *sc, s7_pointer args)"
.Ft void
.Fn s7_c_type_set_to_list "s7_scheme *sc, s7_int typetag, s7_pointer (*to_list)   (s7_scheme *sc, s7_pointer args)"
.Ft void
.Fn s7_c_type_set_to_string "s7_scheme *sc, s7_int typetag, s7_pointer (*fn) (s7_scheme *sc, s7_pointer args)"
.Ft void
.Fn s7_c_type_set_getter "s7_scheme *sc, s7_int typetag, s7_pointer getter"
.Ft void
.Fn s7_c_type_set_setter "s7_scheme *sc, s7_int typetag, s7_pointer setter"

.Sh DESCRIPTION
These functions create and configure new Scheme types.
.Pp
.Fn s7_make_c_type "s7_scheme *sc, const char *name"
Creates a new C-based type
.Em name
for Scheme.  Takes an arbitrary name string, used by object->string to identify the type, and returns an
.Em s7_int ,
the type "typetag" used to indentify this type in many of the other functions.
.Pp
.Pp
.Fn s7_c_object_type
Returns the c-object's type (the
.Em s7_int
passed to
.Sm off
.Fn s7_make_c_object
)
.Sm on
.Pp
The following functions configure c-types with callback functions that implement core functionality, e.g. length, to_string, etc.
.Pp
Old style free/mark/equal:
.Bl -inset -offset indent
.It
.Fn s7_c_type_set_free
Sets the function that is called by the GC when a Scheme c-object is garbage-collected. You normally use this to free the associated C value (the instance of the struct). To get that value, call
.Fn s7_c_object_value .
It returns the void* pointer that you originally passed to
.Fn s7_make_c_object .
.It
.Fn s7_c_type_set_mark
Sets the function that is called by the GC during its marking phase. Any
.Fn s7_pointer
value local to your C struct should be marked explicitly at this time, or the GC will free it. Use
.Fn s7_mark
for this.
.It
.Fn s7_c_type_set_equal
.El
.Pp
New style free/mark/equal and equivalent:
.Bl -inset -offset indent
.It
.Fn s7_c_type_set_gc_free
.It
.Fn s7_c_type_set_gc_mark
.It
.Fn s7_c_type_set_is_equal
Sets the function called when s7 sees a c-object of the current type as an argument to
.Em equal? .
When called, this function can assume that the first argument is a c-object of the current type, but the second argument can be anything.
.It
.Fn s7_c_type_set_is_equivalent
Compare objects as in
.Em equivalent?
See
.Fn s7_c_type_set_is_equal
above.
.El
.Pp
.Fn s7_c_type_set_ref "sc, typetag, ref_fn"
registers
.Em ref_fn
as the function called when the c-object is treated as an applicable object in Scheme; i.e. at the car of a list. The c-object will be passed as the first argument, followed by the rest of the list. In other words,
.Em ref_fn
will behave just like an OO method. To evaluate
.Em (obj ...) ,
s7 will call the
.Em ref_fn
registered for the type of
.Em obj
and pass
.Em obj
as the "self" or "this" argument.
.Sy NOTE
the conceptual difference between this and the notion of a
.Em myobj-ref
function. The latter is usually intended as a lookup function, e.g.
.Em (myobj-ref x i)
returns the value at index i.  But
.Em ref_fn
can do anything; it essentially turns the objects it is "attached" to (via their type) into functions.
.Pp
The test code for
.Em g_block
in
.Pa s7/s7test.scm
has
.Em ref_fn
doing double-duty: it is registered as the object's applicable function using this registration function, but it is also bound to symbol
.Em block-ref .
The latter takes two args, an object and an index; but in function position it only needs one arg, the index (?).
.Pp
.Fn s7_c_type_set_set "sc, typetag, set_fn"
registers the function to be called when a c-object of this type occurs as the target of a generalized
.Em set!
application, e.g.
.Em (set! (obj ...) val) .
Scheme calls the registered
.Em set
function, and the arguments in the set! form are passed as a flattened list.
.Pp
.Fn s7_c_type_set_length
registers the function to be called when the object is asked what its length is.
.Pp
.Fn s7_c_type_set_copy
The function called when a copy of the object is needed.
.Pp
.Fn s7_c_type_set_fill
The function called to fill the object with some value.
.Pp
.Fn s7_c_type_set_reverse
Similarly...
.Pp
.Fn s7_c_type_set_to_list
.Pp
.Fn s7_c_type_set_to_string "sc, typetag, fn, args"
registers the function
.Em fn
that implements the Scheme procedure
.Em object->string
for an object of type
.Em typetag .
.Em fn
takes a list and returns a (s7) string. The list arg is of length two:
.Pp
.Bl -bullet -offset indent
.It
The
.Em car
of the list is the object to serialize (an
.Em s7_pointer
)
.It
The
.Em cadr
of the list is either a boolean value or one of the keywords
.Em :write ,
.Em :display ,
and
.Em :readable .
(Both of the first two keywords result in #t being passed; a bug?)
If
.Em :readble
is passed, then
.Em fn
should produce a string that can be evaluated via eval-string to return an object equal to the original.
.El
.Pp
.Fn s7_c_type_set_getter
.Pp
.Fn s7_c_type_set_setter
.Pp
.Fn s7_mark
Marks any Scheme c_object as in-use (use this in the mark function to mark any embedded
.Em s7_pointer
variables).
.Pp
The
.Fn s7_c_type_set_getter
and
.Fn s7_c_type_set_setter
functions help the optimizer handle applicable c-objects.
The
.Em let
in
.Fn s7_make_c_object_with_let
and
.Fn s7_c_object_set_let
needs to be GC protected by marking it in the c_object's mark function.
.Sh RETURN VALUES
Upon successful completion
.Fn foo
and
.Fn bar
return a
.Tn FILE
pointer.
Otherwise,
.Dv NULL
is returned and the global variable
.Va errno
is set to indicate the error.
.Sh EXAMPLES

 s7_define_function(s7, "notify-C", scheme_set_notification, 2, 0, false, "called if notified-var is set!");
 s7_define_variable(s7, "notified-var", s7_make_integer(s7, 0));
 s7_set_setter(s7, s7_make_symbol(s7, "notified-var"), s7_name_to_value(s7, "notify-C"));

.Sh ERRORS
.Sh SEE ALSO
.Xr s7_c_pointers 3
.Pp
.Em SRFI 17 Generalized set!
.Pa https://srfi.schemers.org/srfi-17/srfi-17.html
.Pp
.Em SRFI 123 Generic accessor and modifier operators
.Pa https://srfi.schemers.org/srfi-123/srfi-123.html
.Em Guile manual 6.7.8 Procedures with Setters
.Pa https://www.gnu.org/software/guile/manual/html_node/Procedures-with-Setters.html
.Sh AUTHORS
.An Bill Schottstaedt Aq Mt bil@ccrma.stanford.edu
.An Mike Scholz
provided the FreeBSD support (complex trig funcs, etc)
.An Rick Taube, Andrew Burnson, Donny Ward, and Greg Santucci
provided the MS Visual C++ support
.An Kjetil Matheussen
provided the mingw support
.An chai xiaoxiang
provided the msys2 support
