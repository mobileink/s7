.Dd July 10, 2021
.Dt S7 3
.Os
.Sh NAME
.Nd C Objects
.Sh LIBRARY
.Lb libs7
.Sh SYNOPSIS
.In s7.h
.Ft bool
.Fn s7_is_c_object "s7_pointer p"
.Ft s7_int
.Fn s7_c_object_type "s7_pointer obj"
.Ft void
.Fn *s7_c_object_value "s7_pointer obj"
.Ft void
.Fn *s7_c_object_value_checked "s7_pointer obj" "s7_int type"
.Ft s7_pointer
.Fn s7_make_c_object "s7_scheme *sc, s7_int type, void *value"
.Ft s7_pointer
.Fn s7_make_c_object_with_let "s7_scheme *sc, s7_int type, void *value, s7_pointer let"
.Ft s7_pointer
.Fn s7_make_c_object_without_gc "s7_scheme *sc, s7_int type, void *value"
.Ft s7_pointer
.Fn s7_c_object_let "s7_pointer obj"
.Ft s7_pointer
.Fn s7_c_object_set_let "s7_scheme *sc, s7_pointer obj, s7_pointer e"
.Sh DESCRIPTION
These functions create and configure new Scheme objects.
C-objects in Scheme usually correspond to an instance of a struct in C which you want to access from Scheme. The normal sequence is:
.Bl -enum --offset indent
.It
define a new c-type via
.Fn s7_make_c_type
.It
call type configuration functions (e.g.
.Fn s7_c_type_set_length ,
.Fn s7_c_type_set_is_equal ,
etc.) to specialize the behavior of objects of the c-type
.It
optionally, define (Scheme) functions (using
.Fn s7_define_safe_function ,
.Sm off
.Fn s7_define_typed_function
)
.Sm on
that do something with objects of the c-type, such as
.Em is-foo?
.Em make-foo ,
and any others that make sense.
.It
call
.Fn s7_make_c_object
to wrap a C struct as an object of the c-type.
.El
.Pp
.Fn s7_make_c_type "s7_scheme *sc, const char *name"
creates a new C-based type
.Em name
for Scheme (documented in
.Sm off
.Xr s7_c_types 3
).
.Sm on
.Pp
.Fn s7_is_c_object "s7_pointer p"
Returns true if
.Em p
is a c-object
.Pp
.Fn s7_c_object_type
Returns the c-object's
.Em type
(the
.Em s7_int
passed to
.Sm off
.Fn s7_make_c_object
)
.Sm on
.Pp
.Fn s7_c_object_value
Returns the value bound to that c_object (the void*
.Em value
of
.Sm off
.Fn s7_make_c_object
)
.Sm on
.Pp
.Fn *s7_c_object_value_checked
Like
.F s7_c_object_value ,
but it first checks that the object type matches the given
.Em type .
.Pp
.Fn s7_make_c_object "s7_scheme *sc, s7_int type, void *value"
Creates a new Scheme entity of the given
.Em type
with the given (uninterpreted)
.Em value
.Pp
.Fn s7_make_c_object_with_let
.Pp
.Fn s7_make_c_object_without_gc
Makes a c-object of the given type, but the
.Em gc_free
function (configured by
.Fn s7_c_type_set_gc_free ? )
won't be called when the
.Em s7_cell
that holds the C data is freed for reuse.
.Pp
.Fn s7_c_object_let
.Pp
.Fn s7_c_object_set_let
s7_c_object_let and s7_c_object_set_let manage the c-object's local environment. These two functions need to check that they are passed the correct number of arguments.
.Pp
.Sh RETURN VALUES
Upon successful completion
.Fn foo
and
.Fn bar
return a
.Tn FILE
pointer.
Otherwise,
.Dv NULL
is returned and the global variable
.Va errno
is set to indicate the error.
.Sh EXAMPLES
 s7_define_function(s7, "notify-C", scheme_set_notification, 2, 0, false, "called if notified-var is set!");
 s7_define_variable(s7, "notified-var", s7_make_integer(s7, 0));
 s7_set_setter(s7, s7_make_symbol(s7, "notified-var"), s7_name_to_value(s7, "notify-C"));
.Sh ERRORS
.Sh SEE ALSO
.Xr s7_c_pointers 3 ,
.Xr s7_c_types 3
.Pp
.Em SRFI 17
Generalized set! https://srfi.schemers.org/srfi-17/srfi-17.html
.Pp
.Em Guile manual 6.7.8
Procedures with Setters https://www.gnu.org/software/guile/manual/html_node/Procedures-with-Setters.html
.Sh AUTHORS
.An Bill Schottstaedt Aq Mt bil@ccrma.stanford.edu
.An Mike Scholz
provided the FreeBSD support (complex trig funcs, etc)
.An Rick Taube, Andrew Burnson, Donny Ward, and Greg Santucci
provided the MS Visual C++ support
.An Kjetil Matheussen
provided the mingw support
.An chai xiaoxiang
provided the msys2 support
